// PDF.js 简化版本 - 用于简历解析
// 这是一个简化版的PDF解析库，专门用于提取文本内容

(function() {
    'use strict';
    
    // 简化的PDF解析器
    window.PDFParser = {
        // 解析PDF文件
        parsePDF: function(arrayBuffer) {
            return new Promise((resolve, reject) => {
                try {
                    const text = this.extractTextFromPDF(arrayBuffer);
                    resolve({
                        text: text,
                        pages: [{ text: text }]
                    });
                } catch (error) {
                    reject(error);
                }
            });
        },
        
        // 从PDF中提取文本
        extractTextFromPDF: function(arrayBuffer) {
            // 这是一个简化的文本提取实现
            const uint8Array = new Uint8Array(arrayBuffer);
            const text = this.binaryToString(uint8Array);
            
            // 提取文本内容（简化版本）
            const textMatches = text.match(/BT\s*\/F\d+\s+\d+\s+Tf\s+(\d+\.?\d*)\s+(\d+\.?\d*)\s+Td\s*\((.*?)\)\s*Tj/g);
            let extractedText = '';
            
            if (textMatches) {
                textMatches.forEach(match => {
                    const textMatch = match.match(/\((.*?)\)/);
                    if (textMatch) {
                        extractedText += textMatch[1] + ' ';
                    }
                });
            }
            
            // 如果没有提取到文本，尝试其他方法
            if (!extractedText.trim()) {
                extractedText = this.extractTextByRegex(text);
            }
            
            return extractedText.trim();
        },
        
        // 通过正则表达式提取文本
        extractTextByRegex: function(text) {
            // 提取所有可能的文本内容
            const textPatterns = [
                /\((.*?)\)/g,  // 括号内的内容
                /\[(.*?)\]/g,  // 方括号内的内容
                /<([^>]+)>/g,  // 尖括号内的内容
                /"([^"]+)"/g,  // 引号内的内容
                /'([^']+)'/g   // 单引号内的内容
            ];
            
            let extractedText = '';
            
            textPatterns.forEach(pattern => {
                let match;
                while ((match = pattern.exec(text)) !== null) {
                    extractedText += match[1] + ' ';
                }
            });
            
            return extractedText;
        },
        
        // 二进制转字符串
        binaryToString: function(uint8Array) {
            let result = '';
            for (let i = 0; i < uint8Array.length; i++) {
                result += String.fromCharCode(uint8Array[i]);
            }
            return result;
        }
    };
    
    // 简历信息提取器
    window.ResumeExtractor = {
        // 提取简历信息
        extractResumeInfo: function(text) {
            console.log('开始解析简历文本:', text.substring(0, 200) + '...');
            
            const info = {
                name: this.extractName(text),
                age: this.extractAge(text),
                idCard: this.extractIdCard(text),
                birthDate: this.extractBirthDate(text),
                gender: this.extractGender(text),
                nationality: this.extractNationality(text),
                city: this.extractCity(text),
                phone: this.extractPhone(text),
                email: this.extractEmail(text),
                education: this.extractEducation(text),
                experience: this.extractExperience(text)
            };
            
            console.log('提取的简历信息:', info);
            return info;
        },
        
        // 提取姓名
        extractName: function(text) {
            const patterns = [
                /姓名[：:\s]*([^\s\n\r]{2,4})/,
                /name[：:\s]*([^\s\n\r]{2,4})/i,
                /^([^\s\n\r]{2,4})\s*简历/i,
                /^([^\s\n\r]{2,4})\s*个人简历/i,
                /^([^\s\n\r]{2,4})\s*求职简历/i,
                /^([^\s\n\r]{2,4})\s*应聘/i,
                /^([^\s\n\r]{2,4})\s*应聘简历/i
            ];
            
            for (let pattern of patterns) {
                const match = text.match(pattern);
                if (match && this.isValidName(match[1])) {
                    return match[1].trim();
                }
            }
            
            return '';
        },
        
        // 验证姓名是否有效
        isValidName: function(name) {
            // 排除明显不是姓名的内容
            const invalidPatterns = [
                /^\d+$/,  // 纯数字
                /^[a-zA-Z]+$/,  // 纯英文
                /电话|手机|邮箱|地址|年龄|性别|民族|出生|身份证|教育|工作|经验/i,
                /简历|个人|求职|应聘/i
            ];
            
            return !invalidPatterns.some(pattern => pattern.test(name));
        },
        
        // 提取年龄
        extractAge: function(text) {
            const patterns = [
                /年龄[：:\s]*(\d{1,2})/,
                /age[：:\s]*(\d{1,2})/i,
                /(\d{1,2})\s*岁/,
                /(\d{1,2})\s*周岁/
            ];
            
            for (let pattern of patterns) {
                const match = text.match(pattern);
                if (match) {
                    const age = parseInt(match[1]);
                    if (age >= 16 && age <= 80) {  // 合理的年龄范围
                        return age.toString();
                    }
                }
            }
            
            return '';
        },
        
        // 提取身份证号
        extractIdCard: function(text) {
            const pattern = /(\d{17}[\dXx])/;
            const match = text.match(pattern);
            return match ? match[1] : '';
        },
        
        // 提取出生日期
        extractBirthDate: function(text) {
            const patterns = [
                /出生日期[：:\s]*(\d{4}[-/年]\d{1,2}[-/月]\d{1,2}[日]?)/,
                /出生[：:\s]*(\d{4}[-/年]\d{1,2}[-/月]\d{1,2}[日]?)/,
                /(\d{4}[-/年]\d{1,2}[-/月]\d{1,2}[日]?)\s*出生/,
                /(\d{4}[-/]\d{1,2}[-/]\d{1,2})/,
                /(\d{4}年\d{1,2}月\d{1,2}日)/
            ];
            
            for (let pattern of patterns) {
                const match = text.match(pattern);
                if (match) {
                    return match[1].replace(/[年月日]/g, '-').replace(/\/-/g, '-');
                }
            }
            
            return '';
        },
        
        // 提取性别
        extractGender: function(text) {
            const patterns = [
                /性别[：:\s]*([男女])/,
                /gender[：:\s]*([男女])/i,
                /([男女])\s*性/,
                /([男女])\s*性别/
            ];
            
            for (let pattern of patterns) {
                const match = text.match(pattern);
                if (match) {
                    return match[1];
                }
            }
            
            return '';
        },
        
        // 提取民族
        extractNationality: function(text) {
            const patterns = [
                /民族[：:\s]*([^\s\n\r]{2,10})/,
                /ethnicity[：:\s]*([^\s\n\r]{2,10})/i,
                /([^\s\n\r]{2,10})\s*族/
            ];
            
            for (let pattern of patterns) {
                const match = text.match(pattern);
                if (match && this.isValidNationality(match[1])) {
                    return match[1].trim();
                }
            }
            
            return '';
        },
        
        // 验证民族是否有效
        isValidNationality: function(nationality) {
            const validNationalities = [
                '汉族', '蒙古族', '回族', '藏族', '维吾尔族', '苗族', '彝族', '壮族', '布依族', '朝鲜族',
                '满族', '侗族', '瑶族', '白族', '土家族', '哈尼族', '哈萨克族', '傣族', '黎族', '傈僳族',
                '佤族', '畲族', '高山族', '拉祜族', '水族', '东乡族', '纳西族', '景颇族', '柯尔克孜族',
                '土族', '达斡尔族', '仫佬族', '羌族', '布朗族', '撒拉族', '毛南族', '仡佬族', '锡伯族',
                '阿昌族', '普米族', '塔吉克族', '怒族', '乌孜别克族', '俄罗斯族', '鄂温克族', '德昂族',
                '保安族', '裕固族', '京族', '塔塔尔族', '独龙族', '鄂伦春族', '赫哲族', '门巴族', '珞巴族', '基诺族'
            ];
            
            return validNationalities.some(nation => nationality.includes(nation));
        },
        
        // 提取现居住城市
        extractCity: function(text) {
            const patterns = [
                /现居住[：:\s]*([^\s\n\r]{2,20})/,
                /居住地[：:\s]*([^\s\n\r]{2,20})/,
                /地址[：:\s]*([^\s\n\r]{2,20})/,
                /现住址[：:\s]*([^\s\n\r]{2,20})/,
                /现居[：:\s]*([^\s\n\r]{2,20})/,
                /居住[：:\s]*([^\s\n\r]{2,20})/
            ];
            
            for (let pattern of patterns) {
                const match = text.match(pattern);
                if (match && this.isValidCity(match[1])) {
                    return match[1].trim();
                }
            }
            
            return '';
        },
        
        // 验证城市是否有效
        isValidCity: function(city) {
            // 排除明显不是城市的内容
            const invalidPatterns = [
                /^\d+$/,  // 纯数字
                /电话|手机|邮箱|年龄|性别|民族|出生|身份证|教育|工作|经验/i,
                /简历|个人|求职|应聘/i
            ];
            
            return !invalidPatterns.some(pattern => pattern.test(city));
        },
        
        // 提取电话
        extractPhone: function(text) {
            const patterns = [
                /电话[：:\s]*(\d{11})/,
                /手机[：:\s]*(\d{11})/,
                /联系电话[：:\s]*(\d{11})/,
                /手机号[：:\s]*(\d{11})/,
                /电话号[：:\s]*(\d{11})/,
                /联系方式[：:\s]*(\d{11})/,
                /(\d{11})/  // 最后尝试匹配任何11位数字
            ];
            
            for (let pattern of patterns) {
                const match = text.match(pattern);
                if (match && this.isValidPhone(match[1])) {
                    return match[1];
                }
            }
            
            return '';
        },
        
        // 验证电话号码是否有效
        isValidPhone: function(phone) {
            // 中国手机号规则：1开头，第二位是3,4,5,6,7,8,9
            const phonePattern = /^1[3-9]\d{9}$/;
            return phonePattern.test(phone);
        },
        
        // 提取邮箱
        extractEmail: function(text) {
            const pattern = /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/;
            const match = text.match(pattern);
            return match ? match[1] : '';
        },
        
        // 提取教育背景
        extractEducation: function(text) {
            const patterns = [
                /教育背景[：:\s]*([^\n\r]{10,200})/,
                /教育经历[：:\s]*([^\n\r]{10,200})/,
                /学历[：:\s]*([^\n\r]{10,200})/,
                /教育[：:\s]*([^\n\r]{10,200})/,
                /学习经历[：:\s]*([^\n\r]{10,200})/
            ];
            
            for (let pattern of patterns) {
                const match = text.match(pattern);
                if (match) {
                    return match[1].trim().substring(0, 200);
                }
            }
            
            return '';
        },
        
        // 提取工作经历
        extractExperience: function(text) {
            const patterns = [
                /工作经历[：:\s]*([^\n\r]{20,500})/,
                /工作经验[：:\s]*([^\n\r]{20,500})/,
                /工作[：:\s]*([^\n\r]{20,500})/,
                /职业经历[：:\s]*([^\n\r]{20,500})/,
                /经历[：:\s]*([^\n\r]{20,500})/
            ];
            
            for (let pattern of patterns) {
                const match = text.match(pattern);
                if (match) {
                    return match[1].trim().substring(0, 500);
                }
            }
            
            return '';
        }
    };
    
})();